package examples

import (
    "fmt"
    "log"
    "prog/internal/api"
)

func RunGeocodingExample() {
    client := api.NewGeocodeClient()

    // –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–ö—Ä–µ–º–ª—å, –≠—Ä–º–∏—Ç–∞–∂, —Å–ª—É—á–∞–π–Ω–∞—è —Ç–æ—á–∫–∞)
    testPoints := []struct {
        name      string
        lat, lon float64
    }{
        {"–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –ö—Ä–µ–º–ª—å", 55.752023, 37.617499},
        {"–≠—Ä–º–∏—Ç–∞–∂", 59.934280, 30.335098},
        {"–†–∞–Ω–¥–æ–º–Ω–∞—è —Ç–æ—á–∫–∞ –≤ –ú–æ—Å–∫–≤–µ (—Ç–æ—á–∫—É –≤–≤–æ–¥–∏–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ)", 55.733842, 37.588144}, //–†–∞–Ω–¥–æ–º–Ω—É—é —Ç–æ—á–∫—É –≤–≤–æ–¥–∏–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ
    }

    for _, point := range testPoints {
        fmt.Printf("\nüîç %s\n", point.name)
        fmt.Printf("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: %.6f, %.6f\n", point.lat, point.lon)

        address, err := client.ReverseGeocode(point.lat, point.lon)
        if err != nil {
            log.Printf("–û—à–∏–±–∫–∞: %v", err)
            continue
        }

        fmt.Println("\nüìå –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:")
        fmt.Printf("–ö—Ä–∞—Ç–∫–∏–π –∞–¥—Ä–µ—Å: %s\n", address.Formatted)
        
        if address.Description != "" {
            fmt.Printf("–û–±—ä–µ–∫—Ç: %s\n", address.Description)
        }
        
        if address.Street != "" {
            streetInfo := address.Street
            if address.HouseNumber != "" {
                streetInfo += ", " + address.HouseNumber
            }
            fmt.Printf("–£–ª–∏—Ü–∞: %s\n", streetInfo)
        }
        
        if address.City != "" {
            fmt.Printf("–ì–æ—Ä–æ–¥: %s\n", address.City)
        }
        
        if address.PostalCode != "" {
            fmt.Printf("–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: %s\n", address.PostalCode)
        }
        
        fmt.Printf("–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å: %s\n", address.FullAddress)
    }
}